# -*- coding: utf-8 -*-
"""Atividade_15_Projeto_Final_SENAI.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VWP1werQZBgTlfcxHoTTBgfuHftcs2zA

Projeto Final TCS/SENAI Python
"""

# A ideia é montar um sistema simples de fármacia e controle de estoque, possíveis melhorias seria a geração de relatórios
#  Métodos
# -> Cadastro PRONTO
# -> Excluir PRONTO
# -> Consultar PRONTO
# -> Gerar lista de produtos PRONTO

class Farmacia:

    lista_produtos = []  # Criação da lista de produtos
    id_produto = len(lista_produtos) # Criação do código do produto..... só para saber o número de produtos que já foram cadastrados

    def __init__(self, produto, descricao, quantidade = 0, valor = 0):  # Constrói um produto
        self.__id_produto = Farmacia.id_produto
        self.__produto = produto
        self.__descricao = descricao
        self.__quantidade = quantidade
        self.__valor = valor
        lista_aux = []
        lista_aux.append(Farmacia.id_produto)
        lista_aux.append(self.__produto)
        lista_aux.append(self.__descricao)
        lista_aux.append(self.__quantidade)
        lista_aux.append(self.__valor)
        Farmacia.lista_produtos.append(lista_aux)
        Farmacia.id_produto = self.__id_produto + 1


    def __str__(self):  # Define como sera  print do produto
        return f"|Cod:{self.__id_produto}||Produto: {self.__produto} ||Descrição: {self.__descricao}||Quantidade: {self.__quantidade}||Preço: R$ {self.__valor :.2f}|"


    def lista_produto():  # Imprime a lista de produtos
        print()
        for i in range(len(Farmacia.lista_produtos)):
            print(Farmacia.lista_produtos[i])


    def consulta_index(nome):  # Método utilizado quando a pessoa quiser saber o index do produto.
        print()
        nome_produto = nome
        index = None
        for i in range(len(Farmacia.lista_produtos)):
            if Farmacia.lista_produtos[i][1] == nome_produto:
                index = i
        return index


    def consulta_produto_id(num):  # Consultar produto através do seu Código
        print()
        item = None
        for i in range(len(Farmacia.lista_produtos)):
            if Farmacia.lista_produtos[i][0] == num:
                preco = Farmacia.lista_produtos[i][4]
                item = f"||Cod:{Farmacia.lista_produtos[i][0]}||Produto:{Farmacia.lista_produtos[i][1]}||Descrição:{Farmacia.lista_produtos[i][2]}||Quantidade em estoque:{Farmacia.lista_produtos[i][3]}||Preço:R${preco:.2f}||"
        return item


    def consulta_final_item():  # Consulta um produto através de seu nome
        print()
        a = input("Digite um nome de produto: ")
        index = Farmacia.consulta_index(a)
        produto_final = Farmacia.consulta_produto_id(index)
        return produto_final


    def insere_produto():  # Tratando a entrada de produto
        try:
            produto = input("Digite o nome do produto: ")
            return produto
        except NameError:
            return 'Value Error'
        except SyntaxError:
            return 'Syntax Error'


    def insere_descricao():  # Tratando a entrada da descrição
        try:
            descricao = input("Digite a descrição do produto: ")
            return descricao
        except NameError:
            return 'Value Error'
        except SyntaxError:
            return 'Syntax Error'


    def insere_quantidade():  # Tratando a entrada de quantidade
        try:
            quantidade = int(input("Digite a quantidade de produto comprada: "))
            return quantidade
        except ValueError:
            return 'Value Error'
        except TypeError:
            return 'Type Error'
        except AttributeError:
            return 'Attribute Error'


    def insere_preco():  # Tratando a entrada de preço
        try:
            preco = float(input("Digite o preço do produto: R$  "))
            return preco
        except ValueError:
            return 'Value Error'
        except TypeError:
            return 'Type Error'
        except AttributeError:
            return 'Attribute Error'


    def adicionar_produto():  # Adiciona um produto a lista
        print()
        print("Adicionando um novo produto!")
        produto = Farmacia.insere_produto()
        descricao = Farmacia.insere_descricao()
        quantidade = Farmacia.insere_quantidade()
        preco = Farmacia.insere_preco()
        produto_final = Farmacia(produto, descricao, quantidade, preco)
        return produto_final

    def delete_produto():
        print()
        nome_produto_delete = input("Digite o nome do produto a ser excluído: ")
        produto = Farmacia.consulta_index(nome_produto_delete)
        try:
            return Farmacia.lista_produtos.pop(produto)
        except ValueError:
            return 'Value Error'
        except IndexError:
            return 'Produto inexistente'
        except NameError:
            return 'Produto inexistente'

#  Primeiro modo de inserir um produto
print("Inserindo dois produtos pelo modo 'Mêcanico'")
produto1 = Farmacia('Dipirona', 'Analgésico', 10, 5.00)
produto2 = Farmacia('Loratadina', 'Antialérgico', 100, 10.00)
print(produto1)
print(produto2)

# Segundo modo de inserir um produto
print()
ar = Farmacia.adicionar_produto()
print(ar)
print()

# Listando produto do sistema
Farmacia.lista_produto()
print()

# Consultando um produto pelo Id
print('Consulta pelo Id')
consulta_pelo_id = Farmacia.consulta_produto_id(1)
print(consulta_pelo_id)
print()

# Consultando um produto pelo Nome
print('Consultando produto pelo nome')
consultando_pelo_nome = Farmacia.consulta_final_item()
print(consultando_pelo_nome)
print()

# Deletando produtos
print('Excluindo produtos')
Farmacia.delete_produto()
print()
print("Imprimindo produtos")
Farmacia.lista_produto()
print()

# Consultando um produto pelo Nome
print("Consultando produto inexistente")
consultando_pelo_nome = Farmacia.consulta_final_item()
print(consultando_pelo_nome)
print()